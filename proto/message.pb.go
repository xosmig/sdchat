// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package sdchat2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_message_e4a9ae369269e97e, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "sdchat2.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (Node_RouteChatClient, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (Node_RouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/sdchat2.Node/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRouteChatClient{stream}
	return x, nil
}

type Node_RouteChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type nodeRouteChatClient struct {
	grpc.ClientStream
}

func (x *nodeRouteChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeRouteChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Node service

type NodeServer interface {
	RouteChat(Node_RouteChatServer) error
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).RouteChat(&nodeRouteChatServer{stream})
}

type Node_RouteChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type nodeRouteChatServer struct {
	grpc.ServerStream
}

func (x *nodeRouteChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeRouteChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sdchat2.Node",
	HandlerType: (*NodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RouteChat",
			Handler:       _Node_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_message_e4a9ae369269e97e) }

var fileDescriptor_message_e4a9ae369269e97e = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2f, 0x4e, 0x49, 0xce, 0x48,
	0x2c, 0x31, 0x52, 0xf2, 0xe7, 0x62, 0xf7, 0x85, 0xc8, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6,
	0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x20, 0xb1, 0x92, 0xd4, 0x8a, 0x12,
	0x09, 0x26, 0x88, 0x18, 0x88, 0x2d, 0x24, 0xc3, 0xc5, 0x59, 0x92, 0x99, 0x9b, 0x5a, 0x5c, 0x92,
	0x98, 0x5b, 0x20, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1c, 0x84, 0x10, 0x30, 0xb2, 0xe5, 0x62, 0xf1,
	0xcb, 0x4f, 0x49, 0x15, 0x32, 0xe5, 0xe2, 0x0c, 0xca, 0x2f, 0x2d, 0x49, 0x75, 0xce, 0x48, 0x2c,
	0x11, 0x12, 0xd0, 0x83, 0xda, 0xa7, 0x07, 0xb5, 0x4c, 0x0a, 0x43, 0x44, 0x89, 0x41, 0x83, 0xd1,
	0x80, 0xd1, 0x49, 0x9e, 0x4b, 0x20, 0x39, 0x3f, 0x57, 0xaf, 0xb8, 0x20, 0x29, 0xb1, 0x14, 0xaa,
	0xc4, 0x89, 0x3b, 0x18, 0x4c, 0x07, 0x80, 0x5c, 0x9e, 0xc4, 0x06, 0xf6, 0x80, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0x01, 0x43, 0xb3, 0xd1, 0x00, 0x00, 0x00,
}
