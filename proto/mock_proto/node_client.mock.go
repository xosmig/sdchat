// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xosmig/sdchat/proto (interfaces: NodeClient,Node_RouteChatClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/xosmig/sdchat/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// RouteChat mocks base method
func (m *MockNodeClient) RouteChat(arg0 context.Context, arg1 ...grpc.CallOption) (proto.Node_RouteChatClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RouteChat", varargs...)
	ret0, _ := ret[0].(proto.Node_RouteChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteChat indicates an expected call of RouteChat
func (mr *MockNodeClientMockRecorder) RouteChat(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteChat", reflect.TypeOf((*MockNodeClient)(nil).RouteChat), varargs...)
}

// MockNode_RouteChatClient is a mock of Node_RouteChatClient interface
type MockNode_RouteChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_RouteChatClientMockRecorder
}

// MockNode_RouteChatClientMockRecorder is the mock recorder for MockNode_RouteChatClient
type MockNode_RouteChatClientMockRecorder struct {
	mock *MockNode_RouteChatClient
}

// NewMockNode_RouteChatClient creates a new mock instance
func NewMockNode_RouteChatClient(ctrl *gomock.Controller) *MockNode_RouteChatClient {
	mock := &MockNode_RouteChatClient{ctrl: ctrl}
	mock.recorder = &MockNode_RouteChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_RouteChatClient) EXPECT() *MockNode_RouteChatClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNode_RouteChatClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNode_RouteChatClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_RouteChatClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNode_RouteChatClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_RouteChatClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_RouteChatClient)(nil).Context))
}

// Header mocks base method
func (m *MockNode_RouteChatClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockNode_RouteChatClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_RouteChatClient)(nil).Header))
}

// Recv mocks base method
func (m *MockNode_RouteChatClient) Recv() (*proto.Message, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_RouteChatClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_RouteChatClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_RouteChatClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_RouteChatClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_RouteChatClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_RouteChatClient) Send(arg0 *proto.Message) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_RouteChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_RouteChatClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockNode_RouteChatClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_RouteChatClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_RouteChatClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockNode_RouteChatClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockNode_RouteChatClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_RouteChatClient)(nil).Trailer))
}
