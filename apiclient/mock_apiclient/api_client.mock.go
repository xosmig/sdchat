// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xosmig/sdchat/apiclient (interfaces: ApiClient)

// Package mock_apiclient is a generated GoMock package.
package mock_apiclient

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/xosmig/sdchat/proto"
	reflect "reflect"
)

// MockApiClient is a mock of ApiClient interface
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// ReceiveMessage mocks base method
func (m *MockApiClient) ReceiveMessage() (*proto.Message, error) {
	ret := m.ctrl.Call(m, "ReceiveMessage")
	ret0, _ := ret[0].(*proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage
func (mr *MockApiClientMockRecorder) ReceiveMessage() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockApiClient)(nil).ReceiveMessage))
}

// SendMessage mocks base method
func (m *MockApiClient) SendMessage(arg0 *proto.Message) error {
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockApiClientMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockApiClient)(nil).SendMessage), arg0)
}

// Start mocks base method
func (m *MockApiClient) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockApiClientMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApiClient)(nil).Start))
}

// Stop mocks base method
func (m *MockApiClient) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockApiClientMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockApiClient)(nil).Stop))
}
